.PHONY: clean compile_translations coverage diff_cover docs dummy_translations \
	extract_translations fake_translations help pull_translations push_translations \
	quality requirements selfcheck test test-all upgrade validate

include repo-tools/base.mk

.DEFAULT_GOAL := help

define BROWSER_PYSCRIPT
import os, webbrowser, sys
try:
	from urllib import pathname2url
except:
	from urllib.request import pathname2url

webbrowser.open("file://" + pathname2url(os.path.abspath(sys.argv[1])))
endef
export BROWSER_PYSCRIPT
BROWSER := python -c "$$BROWSER_PYSCRIPT"

help: ## display this help message
	@echo "Please use \`make <target>' where <target> is one of"
	@perl -nle'print $& if m{^[a-zA-Z_-]+:.*?## .*$$}' $(MAKEFILE_LIST) | sort | awk 'BEGIN {FS = ":.*?## "}; {printf "\033[36m  %-25s\033[0m %s\n", $$1, $$2}'

clean: $(COVERAGE) ## remove generated byte code, coverage reports, and build artifacts
	find . -name '__pycache__' -exec rm -rf {} +
	find . -name '*.pyc' -exec rm -f {} +
	find . -name '*.pyo' -exec rm -f {} +
	find . -name '*~' -exec rm -f {} +
	$(COVERAGE) erase
	rm -fr build/
	rm -fr dist/
	rm -fr *.egg-info

coverage: clean $(PYTEST) ## generate and view HTML coverage report
	$(PYTEST) --cov-report html
	$(BROWSER) htmlcov/index.html

docs: $(TOX) ## generate Sphinx HTML documentation, including API docs
	$(TOX) -e docs
	$(BROWSER) docs/_build/html/index.html

upgrade: export CUSTOM_COMPILE_COMMAND=make upgrade
upgrade: $(PIP) $(PIP-SYNC) ## update the requirements/*.txt files with the latest packages satisfying requirements/*.in
	$(PIP) install -qr requirements/pip-tools.txt
	# Make sure to compile files after any other files they include!
	$(PIP-COMPILE) --allow-unsafe --rebuild --upgrade -o requirements/pip.txt requirements/pip.in
	$(PIP-COMPILE) --no-emit-trusted-host --upgrade -o requirements/pip-tools.txt requirements/pip-tools.in
	$(PIP) install -qr requirements/pip.txt
	$(PIP) install -qr requirements/pip-tools.txt
	$(PIP-COMPILE) --no-emit-trusted-host --upgrade -o requirements/base.txt requirements/base.in
	$(PIP-COMPILE) --no-emit-trusted-host --upgrade -o requirements/test.txt requirements/test.in
	$(PIP-COMPILE) --no-emit-trusted-host --upgrade -o requirements/doc.txt requirements/doc.in
	$(PIP-COMPILE) --no-emit-trusted-host --upgrade -o requirements/quality.txt requirements/quality.in
	$(PIP-COMPILE) --no-emit-trusted-host --upgrade -o requirements/ci.txt requirements/ci.in
	$(PIP-COMPILE) --no-emit-trusted-host --upgrade -o requirements/dev.txt requirements/dev.in
	# Let tox control the Django version for tests
	sed '/^[dD]jango==/d' requirements/test.txt > requirements/test.tmp
	mv requirements/test.tmp requirements/test.txt

isort: $(TOX) ## fixes isort issues found during quality check
	$(TOX) -e isort

quality: ## check coding style with pycodestyle and pylint
	$(TOX) -e quality

requirements: $(PIP) $(PIP-SYNC) ## install development environment requirements
	$(PIP-SYNC) requirements/dev.txt requirements/private.*
	$(PIP) install . # CLI entry points

test: clean $(PYTEST) ## run tests in the current virtualenv
	$(PYTEST)

diff_cover: test $(DIFF-COVER) ## find diff lines that need test coverage
	$(DIFF-COVER) coverage.xml

test-all: $(TOX) ## run tests on every supported Python/Django combination
	$(TOX) -e quality
	$(TOX)

validate: quality test ## run tests and quality checks

selfcheck: ## check that the Makefile is well-formed
	@echo "The Makefile is well-formed."
